package kuromasu

import "testing"

func TestGenerate(t *testing.T) {
	type testValues struct {
		width  int
		height int
		fill   int
	}

	t.Run("Generate tasks with valid arguments", func(t *testing.T) {

		validValues := []testValues{
			{width: 15, height: 15, fill: 50},
			{width: 10, height: 10, fill: 30},
			{width: 4, height: 4, fill: 10},
			{width: 15, height: 10, fill: 30},
			{width: 10, height: 15, fill: 30},
			{width: 10, height: 10, fill: 50},
			{width: 4, height: 10, fill: 30},
			{width: 10, height: 4, fill: 30},
			{width: 10, height: 10, fill: 10},
		}

		for _, vv := range validValues {
			result, err := Generate(vv.width, vv.height, vv.fill)

			if err != nil {
				t.Errorf("Expected err == nil, but got %v", err.Error())
			}

			if len(result.Task) != vv.height || len(result.Task[0]) != vv.width {
				t.Errorf("Expected width, height == %d, %d, but got %d, %d",
					vv.width, vv.height, len(result.Task[0]), len(result.Task))
			}
		}
	})

	t.Run("Generate tasks with invalid arguments", func(t *testing.T) {
		invalidValues := []testValues{
			{width: 16, height: 16, fill: 60},
			{width: 3, height: 3, fill: 5},
			{width: 3, height: 10, fill: 30},
			{width: 10, height: 3, fill: 30},
			{width: 10, height: 10, fill: 5},
			{width: 16, height: 10, fill: 30},
			{width: 10, height: 16, fill: 30},
			{width: 10, height: 10, fill: 60},
		}

		for _, iv := range invalidValues {
			_, err := Generate(iv.width, iv.height, iv.fill)

			if err == nil {
				t.Errorf("Expected error, but got nill")
			}
		}
	})
}

func TestVerify(t *testing.T) {
	t.Run("Verify valid solutions", func(t *testing.T) {
		validValues := [][][]string{
			{{"4", "x", "5", "2"}, {"6", "3", "6", "x"}, {"4", "x", "5", "3"}, {"7", "4", "7", "5"}},
			{{"3", "5", "3", "x", "8", "3", "8"},
				{"x", "3", "x", "3", "7", "x", "6"},
				{"11", "9", "8", "8", "12", "11", "12"},
				{"5", "x", "2", "x", "8", "7", "8"},
				{"6", "2", "x", "6", "9", "8", "9"},
				{"5", "x", "6", "7", "10", "9", "10"},
				{"8", "4", "5", "6", "x", "5", "x"},
			}, {{"3", "x", "10", "12", "21", "7", "8", "11", "8", "x", "8", "5", "9", "12", "x"},
				{"7", "13", "8", "10", "19", "x", "10", "13", "10", "10", "13", "10", "14", "17", "14"},
				{"8", "14", "9", "11", "20", "6", "x", "5", "x", "3", "6", "x", "8", "11", "8"},
				{"x", "12", "7", "9", "18", "x", "8", "7", "6", "x", "9", "10", "10", "13", "10"},
				{"8", "10", "x", "17", "26", "17", "17", "16", "15", "21", "16", "17", "17", "20", "17"},
				{"13", "15", "15", "12", "21", "12", "12", "x", "5", "11", "x", "9", "9", "12", "9"},
				{"9", "11", "11", "x", "22", "13", "13", "9", "11", "17", "16", "13", "x", "10", "7"},
				{"14", "16", "16", "15", "22", "13", "13", "9", "x", "14", "13", "10", "7", "13", "x"},
				{"13", "15", "15", "14", "21", "12", "12", "x", "8", "16", "15", "12", "9", "15", "8"},
				{"12", "14", "14", "13", "20", "11", "x", "5", "5", "13", "12", "x", "3", "x", "2"},
				{"7", "x", "11", "10", "17", "x", "6", "3", "x", "12", "11", "4", "x", "5", "x"},
				{"x", "7", "14", "13", "20", "7", "10", "x", "10", "16", "15", "8", "10", "11", "10"},
				{"13", "12", "19", "18", "25", "12", "15", "11", "14", "20", "19", "x", "6", "7", "6"},
				{"3", "x", "11", "10", "17", "x", "5", "x", "10", "16", "15", "8", "10", "11", "10"},
				{"4", "2", "x", "13", "20", "6", "10", "6", "9", "x", "13", "6", "8", "9", "8"},
			},
		}

		for _, vv := range validValues {
			result, err := Verify(vv)

			if err != nil {
				t.Errorf("Expected err == nil, but got %v", err.Error())
			}

			if !result.IsValid {
				t.Errorf("Expected valid result, butt got %v", result)
			}
		}
	})

	t.Run("Verify invalid solutions", func(t *testing.T) {
		invalidValues := [][][]string{
			{{"4", "x", "5", "2"}, {"6", "x", "6", "x"}, {"4", "x", "5", "3"}, {"7", "x", "7", "5"}},
			{{"3", "5", "3", "x", "8", "3", "8"},
				{"x", "3", "x", "3", "7", "x", "6"},
				{"11", "9", "8", "x", "12", "11", "12"},
				{"5", "x", "2", "x", "8", "7", "8"},
				{"6", "2", "x", "6", "9", "8", "9"},
				{"5", "x", "6", "7", "x", "9", "10"},
				{"8", "4", "5", "6", "x", "5", "x"},
			}, {{"3", "x", "10", "12", "21", "7", "8", "11", "8", "x", "8", "5", "9", "12", "x"},
				{"7", "13", "8", "10", "19", "x", "10", "13", "10", "10", "13", "10", "14", "17", "14"},
				{"8", "14", "9", "11", "x", "6", "x", "5", "x", "3", "6", "x", "8", "11", "8"},
				{"x", "12", "7", "9", "18", "x", "8", "7", "6", "x", "9", "10", "10", "13", "10"},
				{"8", "10", "x", "17", "26", "17", "17", "16", "15", "21", "16", "17", "17", "20", "17"},
				{"13", "15", "15", "12", "21", "12", "12", "x", "5", "11", "x", "9", "9", "12", "9"},
				{"9", "11", "11", "x", "x", "13", "13", "9", "11", "17", "16", "13", "x", "10", "7"},
				{"14", "16", "16", "15", "22", "13", "13", "9", "x", "14", "13", "10", "7", "13", "x"},
				{"13", "15", "15", "14", "21", "12", "12", "x", "8", "16", "x", "12", "9", "15", "8"},
				{"12", "14", "14", "13", "20", "11", "x", "5", "5", "13", "12", "x", "3", "x", "2"},
				{"7", "x", "11", "10", "17", "x", "6", "3", "x", "12", "11", "4", "x", "5", "x"},
				{"x", "7", "14", "13", "20", "7", "10", "x", "10", "16", "15", "8", "10", "11", "10"},
				{"13", "12", "19", "18", "25", "12", "15", "11", "14", "20", "19", "x", "6", "7", "6"},
				{"3", "x", "11", "10", "17", "x", "5", "x", "10", "16", "15", "8", "10", "11", "10"},
				{"4", "2", "x", "13", "20", "6", "10", "6", "9", "x", "13", "6", "8", "9", "8"},
			},
		}

		for _, iv := range invalidValues {
			result, err := Verify(iv)

			if err != nil {
				t.Errorf("Expected err == nil, but got %v", err.Error())
			}

			if result.IsValid {
				t.Errorf("Expected invalid result, butt got %v", result)
			}
		}
	})

	t.Run("Verify solutions with invalid sizes", func(t *testing.T) {
		invalidValues := [][][]string{
			{{"4", "x", "5", "2"}, {"6", "x", "6", "x"}, {"7", "x", "7", "5"}},
			{
				{"3", "x", "10", "12", "21", "7", "8", "11", "8", "x", "8", "5", "9", "12", "x"},
				{"7", "13", "8", "10", "19", "x", "10", "13", "10", "10", "13", "10", "14", "17", "14"},
				{"8", "14", "9", "11", "x", "6", "x", "5", "x", "3", "6", "x", "8", "11", "8"},
				{"x", "12", "7", "9", "18", "x", "8", "7", "6", "x", "9", "10", "10", "13", "10"},
				{"8", "10", "x", "17", "26", "17", "17", "16", "15", "21", "16", "17", "17", "20", "17"},
				{"13", "15", "15", "12", "21", "12", "12", "x", "5", "11", "x", "9", "9", "12", "9"},
				{"9", "11", "11", "x", "x", "13", "13", "9", "11", "17", "16", "13", "x", "10", "7"},
				{"14", "16", "16", "15", "22", "13", "13", "9", "x", "14", "13", "10", "7", "13", "x"},
				{"13", "15", "15", "14", "21", "12", "12", "x", "8", "16", "x", "12", "9", "15", "8"},
				{"12", "14", "14", "13", "20", "11", "x", "5", "5", "13", "12", "x", "3", "x", "2"},
				{"7", "x", "11", "10", "17", "x", "6", "3", "x", "12", "11", "4", "x", "5", "x"},
				{"x", "7", "14", "13", "20", "7", "10", "x", "10", "16", "15", "8", "10", "11", "10"},
				{"13", "12", "19", "18", "25", "12", "15", "11", "14", "20", "19", "x", "6", "7", "6"},
				{"3", "x", "11", "10", "17", "x", "5", "x", "10", "16", "15", "8", "10", "11", "10"},
				{"4", "2", "x", "13", "20", "6", "10", "6", "9", "x", "13", "6", "8", "9", "8"},
				{"4", "2", "x", "13", "20", "6", "10", "6", "9", "x", "13", "6", "8", "9", "8"},
				{"4", "2", "x", "13", "20", "6", "10", "6", "9", "x", "13", "6", "8", "9", "8"},
			},
		}

		for _, iv := range invalidValues {
			_, err := Verify(iv)

			if err == nil {
				t.Errorf("Expected error, but got nill")
			}
		}
	})
}
